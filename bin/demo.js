// Generated by Haxe 3.3.0 (git build development @ c262f4e)
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var el = window.document.querySelector(".table-container");
	var cards = [{ name : "Quarantine Field", color : "White", type : "Enchantment", rarity : "Mythic", multiverseId : "402001", cmc : 2, draftval : 5, tcgprice : 2.52},{ name : "Hero of Goma Fada", color : "White", type : "Creature", rarity : "Rare", multiverseId : "401913", cmc : 5, draftval : 3.5, tcgprice : 0.25},{ name : "Felidar Sovereign", color : "White", type : "Creature", rarity : "Rare", multiverseId : "401878", cmc : 6, draftval : 4, tcgprice : 0.56},{ name : "Part the Waterveil", color : "Blue", type : "Sorcery", rarity : "Mythic", multiverseId : "401982", cmc : 6, draftval : 2.0, tcgprice : 1.29},{ name : "Guardian of Tazeem", color : "Blue", type : "Creature", rarity : "Rare", multiverseId : "401906", cmc : 5, draftval : 4.5, tcgprice : 0.25}];
	var foldHeader = function(text) {
		return function(ft,row,col) {
			var doc = null;
			if(null == doc) {
				doc = window.document;
			}
			var el1 = doc.createElement("div");
			var _g = 0;
			var _g1 = [{ value : "ft-cell-content", name : "class"}];
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				el1.setAttribute(o.name,o.value);
			}
			var attrs = null;
			if(null != attrs) {
				var tmp = attrs.keys();
				while(tmp.hasNext()) {
					var attr = tmp.next();
					el1.setAttribute(attr,__map_reserved[attr] != null?attrs.getReserved(attr):attrs.h[attr]);
				}
			}
			var children = null;
			if(null != children) {
				var _g2 = 0;
				while(_g2 < children.length) {
					var child = children[_g2];
					++_g2;
					el1.appendChild(child);
				}
			}
			var textContent = text;
			if(null != textContent) {
				el1.appendChild(doc.createTextNode(textContent));
			}
			var cell = el1;
			var f = function() {
				ft.toggleRow(row);
			};
			cell.addEventListener("click",function(e) {
				e.preventDefault();
				f();
			});
			return cell;
		};
	};
	var cardsToRowData = null;
	cardsToRowData = function(cards1,groupBy) {
		return thx_Maps.tuples(thx_Arrays.groupByAppend(cards1,groupBy[0],new haxe_ds_StringMap())).map(function(tuple) {
			var restOfGroupBys = groupBy.slice(1);
			if(restOfGroupBys.length == 0) {
				var array = tuple._1.map(function(card) {
					return [fancy_table_util_CellContentImpl.LazyElement(function(_,_1,_2) {
						var doc1 = null;
						if(null == doc1) {
							doc1 = window.document;
						}
						var el2 = doc1.createElement("div");
						var _g11 = 0;
						var _g21 = [{ value : "ft-cell-content", name : "class"}];
						while(_g11 < _g21.length) {
							var o1 = _g21[_g11];
							++_g11;
							el2.setAttribute(o1.name,o1.value);
						}
						var attrs1 = null;
						if(null != attrs1) {
							var tmp1 = attrs1.keys();
							while(tmp1.hasNext()) {
								var attr1 = tmp1.next();
								el2.setAttribute(attr1,__map_reserved[attr1] != null?attrs1.getReserved(attr1):attrs1.h[attr1]);
							}
						}
						var doc2 = null;
						if(null == doc2) {
							doc2 = window.document;
						}
						var el3 = doc2.createElement("span");
						var _g12 = 0;
						var _g22 = [];
						while(_g12 < _g22.length) {
							var o2 = _g22[_g12];
							++_g12;
							el3.setAttribute(o2.name,o2.value);
						}
						var attrs2 = null;
						if(null != attrs2) {
							var tmp2 = attrs2.keys();
							while(tmp2.hasNext()) {
								var attr2 = tmp2.next();
								el3.setAttribute(attr2,__map_reserved[attr2] != null?attrs2.getReserved(attr2):attrs2.h[attr2]);
							}
						}
						var children1 = null;
						if(null != children1) {
							var _g13 = 0;
							while(_g13 < children1.length) {
								var child1 = children1[_g13];
								++_g13;
								el3.appendChild(child1);
							}
						}
						var textContent1 = card.name;
						if(null != textContent1) {
							el3.appendChild(doc2.createTextNode(textContent1));
						}
						var tmp3 = el3;
						var doc3 = null;
						if(null == doc3) {
							doc3 = window.document;
						}
						var el4 = doc3.createElement("a");
						var _g23 = 0;
						var _g3 = [];
						while(_g23 < _g3.length) {
							var o3 = _g3[_g23];
							++_g23;
							el4.setAttribute(o3.name,o3.value);
						}
						var _g24 = new haxe_ds_StringMap();
						var value = "http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=" + card.multiverseId;
						if(__map_reserved.href != null) {
							_g24.setReserved("href",value);
						} else {
							_g24.h["href"] = value;
						}
						var attrs3 = _g24;
						if(null != attrs3) {
							var tmp4 = attrs3.keys();
							while(tmp4.hasNext()) {
								var attr3 = tmp4.next();
								el4.setAttribute(attr3,__map_reserved[attr3] != null?attrs3.getReserved(attr3):attrs3.h[attr3]);
							}
						}
						var doc4 = null;
						if(null == doc4) {
							doc4 = window.document;
						}
						var el5 = doc4.createElement("i");
						var _g31 = 0;
						var _g4 = [{ value : "fa fa-external-link-square", name : "class"}];
						while(_g31 < _g4.length) {
							var o4 = _g4[_g31];
							++_g31;
							el5.setAttribute(o4.name,o4.value);
						}
						var attrs4 = null;
						if(null != attrs4) {
							var tmp5 = attrs4.keys();
							while(tmp5.hasNext()) {
								var attr4 = tmp5.next();
								el5.setAttribute(attr4,__map_reserved[attr4] != null?attrs4.getReserved(attr4):attrs4.h[attr4]);
							}
						}
						var children2 = null;
						if(null != children2) {
							var _g32 = 0;
							while(_g32 < children2.length) {
								var child2 = children2[_g32];
								++_g32;
								el5.appendChild(child2);
							}
						}
						var textContent2 = null;
						if(null != textContent2) {
							el5.appendChild(doc4.createTextNode(textContent2));
						}
						var children3 = [el5];
						if(null != children3) {
							var _g33 = 0;
							while(_g33 < children3.length) {
								var child3 = children3[_g33];
								++_g33;
								el4.appendChild(child3);
							}
						}
						var textContent3 = null;
						if(null != textContent3) {
							el4.appendChild(doc3.createTextNode(textContent3));
						}
						var children4 = [tmp3,el4];
						if(null != children4) {
							var _g25 = 0;
							while(_g25 < children4.length) {
								var child4 = children4[_g25];
								++_g25;
								el2.appendChild(child4);
							}
						}
						var textContent4 = null;
						if(null != textContent4) {
							el2.appendChild(doc1.createTextNode(textContent4));
						}
						return el2;
					}),fancy_table_util_CellContentImpl.RawValue(Std.string(card.cmc)),fancy_table_util_CellContentImpl.RawValue(Std.string(card.draftval)),fancy_table_util_CellContentImpl.RawValue(Std.string(card.tcgprice))];
				});
				return { values : Array.prototype.concat.apply([],array), data : []};
			} else {
				return { values : [fancy_table_util_CellContentImpl.LazyElement(foldHeader(tuple._0))], data : cardsToRowData(tuple._1,restOfGroupBys)};
			}
		});
	};
	var cardsToRowData1 = cardsToRowData;
	var table = new fancy_Table(el,fancy_FancyTableData.Nested((function(cards2) {
		return [{ values : [fancy_table_util__$CellContent_CellContent_$Impl_$.fromString("Cards"),fancy_table_util__$CellContent_CellContent_$Impl_$.fromString("CMC"),fancy_table_util__$CellContent_CellContent_$Impl_$.fromString("Draft Value"),fancy_table_util__$CellContent_CellContent_$Impl_$.fromString("Price")]}].concat(cardsToRowData1(cards2,[function(card1) {
			return card1.color;
		},function(card2) {
			return card2.rarity;
		},function(card3) {
			return card3.type;
		},function(card4) {
			return card4.name;
		}]));
	})(cards)),{ fixedTop : 1, fixedLeft : 1});
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var dots_Dom = function() { };
dots_Dom.__name__ = true;
dots_Dom.toggleClass = function(el,className,condition) {
	if(null == condition) {
		condition = !el.classList.contains(className);
	}
	if(condition) {
		el.classList.add(className);
	} else {
		el.classList.remove(className);
	}
};
dots_Dom.appendChild = function(el,child) {
	el.appendChild(child);
	return el;
};
dots_Dom.appendChildren = function(el,children) {
	return thx_Arrays.reduce(children,dots_Dom.appendChild,el);
};
dots_Dom.append = function(el,child,children) {
	if(child != null) {
		dots_Dom.appendChild(el,child);
	}
	if(children != null && children.length > 0) {
		dots_Dom.appendChildren(el,children);
	}
	return el;
};
dots_Dom.empty = function(el) {
	while(el.firstChild != null) el.removeChild(el.firstChild);
	return el;
};
var dots_Query = function() { };
dots_Query.__name__ = true;
dots_Query.find = function(selector,ctx) {
	return (ctx != null?ctx:dots_Query.doc).querySelector(selector);
};
dots_Query.selectNodes = function(selector,ctx) {
	return (ctx != null?ctx:dots_Query.doc).querySelectorAll(selector);
};
var fancy_CellDimension = { __ename__ : true, __constructs__ : ["Fixed","RenderFirst","RenderSmart","RenderAll"] };
fancy_CellDimension.Fixed = function(v) { var $x = ["Fixed",0,v]; $x.__enum__ = fancy_CellDimension; $x.toString = $estr; return $x; };
fancy_CellDimension.RenderFirst = ["RenderFirst",1];
fancy_CellDimension.RenderFirst.toString = $estr;
fancy_CellDimension.RenderFirst.__enum__ = fancy_CellDimension;
fancy_CellDimension.RenderSmart = ["RenderSmart",2];
fancy_CellDimension.RenderSmart.toString = $estr;
fancy_CellDimension.RenderSmart.__enum__ = fancy_CellDimension;
fancy_CellDimension.RenderAll = ["RenderAll",3];
fancy_CellDimension.RenderAll.toString = $estr;
fancy_CellDimension.RenderAll.__enum__ = fancy_CellDimension;
var fancy_Grid = function(parent,options) {
	this.caches = [];
	this.cacheElement = new fancy_core_PositionCache();
	var _gthis = this;
	var doc = null;
	if(null == doc) {
		doc = window.document;
	}
	var el = doc.createElement("div");
	var _g = 0;
	var _g1 = [{ value : "fancy-grid", name : "class"}];
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		el.setAttribute(o.name,o.value);
	}
	var attrs = null;
	if(null != attrs) {
		var tmp = attrs.keys();
		while(tmp.hasNext()) {
			var attr = tmp.next();
			el.setAttribute(attr,__map_reserved[attr] != null?attrs.getReserved(attr):attrs.h[attr]);
		}
	}
	var children = null;
	if(null != children) {
		var _g2 = 0;
		while(_g2 < children.length) {
			var child = children[_g2];
			++_g2;
			el.appendChild(child);
		}
	}
	var textContent = null;
	if(null != textContent) {
		el.appendChild(doc.createTextNode(textContent));
	}
	var fancyGrid = el;
	dots_Dom.append(parent,fancyGrid);
	var doc1 = null;
	if(null == doc1) {
		doc1 = window.document;
	}
	var el1 = doc1.createElement("div");
	var _g3 = 0;
	var _g11 = [{ value : "view", name : "class"}];
	while(_g3 < _g11.length) {
		var o1 = _g11[_g3];
		++_g3;
		el1.setAttribute(o1.name,o1.value);
	}
	var attrs1 = null;
	if(null != attrs1) {
		var tmp1 = attrs1.keys();
		while(tmp1.hasNext()) {
			var attr1 = tmp1.next();
			el1.setAttribute(attr1,__map_reserved[attr1] != null?attrs1.getReserved(attr1):attrs1.h[attr1]);
		}
	}
	var children1 = null;
	if(null != children1) {
		var _g4 = 0;
		while(_g4 < children1.length) {
			var child1 = children1[_g4];
			++_g4;
			el1.appendChild(child1);
		}
	}
	var textContent1 = null;
	if(null != textContent1) {
		el1.appendChild(doc1.createTextNode(textContent1));
	}
	this.view = el1;
	dots_Dom.append(fancyGrid,this.view);
	this.caches.push(this.cacheElement);
	this.render = options.render;
	this.vOffset = this.assignVOffset(options.vOffset);
	this.hOffset = this.assignHOffset(options.hOffset);
	this.vSize = this.assignVSize(options.vSize != null?options.vSize:function(_) {
		return fancy_CellDimension.RenderSmart;
	});
	this.hSize = this.assignHSize(options.hSize != null?options.hSize:function(_1) {
		return fancy_CellDimension.RenderSmart;
	});
	this.rows = options.rows;
	this.columns = options.columns;
	var _0 = options;
	var t;
	if(null == _0) {
		t = null;
	} else {
		var _11 = _0.fixedLeft;
		if(null == _11) {
			t = null;
		} else {
			t = _11;
		}
	}
	this.fixedLeft = t != null?t:0;
	var _01 = options;
	var t1;
	if(null == _01) {
		t1 = null;
	} else {
		var _12 = _01.fixedRight;
		if(null == _12) {
			t1 = null;
		} else {
			t1 = _12;
		}
	}
	this.fixedRight = t1 != null?t1:0;
	var _02 = options;
	var t2;
	if(null == _02) {
		t2 = null;
	} else {
		var _13 = _02.fixedTop;
		if(null == _13) {
			t2 = null;
		} else {
			t2 = _13;
		}
	}
	this.fixedTop = t2 != null?t2:0;
	var _03 = options;
	var t3;
	if(null == _03) {
		t3 = null;
	} else {
		var _14 = _03.fixedBottom;
		if(null == _14) {
			t3 = null;
		} else {
			t3 = _14;
		}
	}
	this.fixedBottom = t3 != null?t3:0;
	var contentWidth = this.hOffset(this.columns - 1) + this.hSize(this.columns - 1);
	var contentHeight = this.vOffset(this.rows - 1) + this.vSize(this.rows - 1);
	this.topRailSize = this.vOffset(this.fixedTop);
	this.leftRailSize = this.hOffset(this.fixedLeft);
	this.bottomRailSize = this.fixedBottom == 0?0:contentHeight - this.vOffset(this.rows - this.fixedBottom);
	this.rightRailSize = this.fixedRight == 0?0:contentWidth - this.hOffset(this.columns - this.fixedRight);
	var _04 = options;
	var t4;
	if(null == _04) {
		t4 = null;
	} else {
		var _15 = _04.scrollerSize;
		if(null == _15) {
			t4 = null;
		} else {
			t4 = _15;
		}
	}
	var scrollerSize = t4 != null?t4:10;
	var _05 = options;
	var t5;
	if(null == _05) {
		t5 = null;
	} else {
		var _16 = _05.scrollerMinSize;
		if(null == _16) {
			t5 = null;
		} else {
			t5 = _16;
		}
	}
	this.grid9 = new fancy_core_Grid9(this.view,{ scrollerMinSize : t5 != null?t5:scrollerSize, scrollerMaxSize : options.scrollerMaxSize, scrollerSize : scrollerSize, contentWidth : contentWidth, contentHeight : contentHeight, topRail : this.topRailSize, leftRail : this.leftRailSize, bottomRail : this.bottomRailSize, rightRail : this.rightRailSize, onScroll : function(x,y,ox,oy) {
		if(oy != y) {
			_gthis.renderMiddle(y);
		}
		if(ox != x) {
			_gthis.renderCenter(x);
		}
		_gthis.renderMain(x,y);
	}, onResize : function(w,h,ow,oh) {
		if(oh != h) {
			_gthis.renderMiddle(_gthis.grid9.position.y);
		}
		if(ow != w) {
			_gthis.renderCenter(_gthis.grid9.position.x);
		}
		_gthis.renderMain(_gthis.grid9.position.x,_gthis.grid9.position.y);
	}});
	this.topLeft = this.grid9.topLeft;
	this.topCenter = this.grid9.topCenter;
	this.topRight = this.grid9.topRight;
	this.middleLeft = this.grid9.middleLeft;
	this.middleCenter = this.grid9.middleCenter;
	this.middleRight = this.grid9.middleRight;
	this.bottomLeft = this.grid9.bottomLeft;
	this.bottomCenter = this.grid9.bottomCenter;
	this.bottomRight = this.grid9.bottomRight;
	this.renderCorners();
	this.renderMiddle(0);
	this.renderCenter(0);
	this.renderMain(0,0);
};
fancy_Grid.__name__ = true;
fancy_Grid.prototype = {
	setRowsAndColumns: function(rows,columns) {
		this.rows = rows;
		this.columns = columns;
		this.invalidateCache();
		var contentWidth = this.hOffset(columns - 1) + this.hSize(columns - 1);
		var contentHeight = this.vOffset(rows - 1) + this.vSize(rows - 1);
		this.topRailSize = this.vOffset(this.fixedTop);
		this.leftRailSize = this.hOffset(this.fixedLeft);
		this.bottomRailSize = this.fixedBottom == 0?0:contentHeight - this.vOffset(rows - this.fixedBottom);
		this.rightRailSize = this.fixedRight == 0?0:contentWidth - this.hOffset(columns - this.fixedRight);
		this.grid9.resizeContent(contentWidth,contentHeight);
		this.grid9.sizeRails(this.topRailSize,this.bottomRailSize,this.leftRailSize,this.rightRailSize);
		this.renderCorners();
		this.renderMiddle(this.grid9.position.y);
		this.renderCenter(this.grid9.position.x);
		this.renderMain(this.grid9.position.x,this.grid9.position.y);
		this.grid9.refresh();
	}
	,invalidateCache: function() {
		var _g = 0;
		var _g1 = this.caches;
		while(_g < _g1.length) {
			var cache = _g1[_g];
			++_g;
			cache.invalidate();
		}
	}
	,assignVSize: function(f) {
		var _gthis = this;
		var cache = new fancy_core_IntCache();
		this.caches.push(cache);
		return function(row) {
			if(cache.cache[row] != null) {
				return cache.cache[row];
			}
			var v = 0.0;
			var vCalculated;
			var _g = f(row);
			switch(_g[1]) {
			case 0:
				vCalculated = _g[2];
				break;
			case 1:
				var el = _gthis.renderAt(row,0);
				dots_Dom.append(_gthis.view,el);
				v = Math.max(0.0,el.offsetHeight);
				_gthis.view.removeChild(el);
				vCalculated = v;
				break;
			case 2:
				var els = [];
				var el1;
				var a = _gthis.fixedLeft + 1;
				var a1 = a > 2?a:2;
				var b = _gthis.columns;
				var leftBound = a1 < b?a1:b;
				var _g1 = 0;
				var _g2 = leftBound;
				while(_g1 < _g2) {
					el1 = _gthis.renderAt(row,_g1++);
					els.push(el1);
					dots_Dom.append(_gthis.view,el1);
				}
				var a2 = _gthis.columns - _gthis.fixedRight - 1;
				var b1 = leftBound + 1;
				var _g11 = a2 > b1?a2:b1;
				var _g3 = _gthis.columns;
				while(_g11 < _g3) {
					el1 = _gthis.renderAt(row,_g11++);
					els.push(el1);
					dots_Dom.append(_gthis.view,el1);
				}
				var _g4 = 0;
				while(_g4 < els.length) {
					var el2 = els[_g4];
					++_g4;
					v = Math.max(v,el2.offsetHeight);
				}
				var _g5 = 0;
				while(_g5 < els.length) {
					var el3 = els[_g5];
					++_g5;
					_gthis.view.removeChild(el3);
				}
				vCalculated = v;
				break;
			case 3:
				var els1 = [];
				var el4;
				var _g12 = 0;
				var _g6 = _gthis.columns;
				while(_g12 < _g6) {
					el4 = _gthis.renderAt(row,_g12++);
					els1.push(el4);
					dots_Dom.append(_gthis.view,el4);
				}
				var _g7 = 0;
				while(_g7 < els1.length) {
					var el5 = els1[_g7];
					++_g7;
					v = Math.max(v,el5.offsetHeight);
				}
				var _g8 = 0;
				while(_g8 < els1.length) {
					var el6 = els1[_g8];
					++_g8;
					_gthis.view.removeChild(el6);
				}
				vCalculated = v;
				break;
			}
			cache.cache[row] = vCalculated;
			return vCalculated;
		};
	}
	,assignHSize: function(f) {
		var _gthis = this;
		var cache = new fancy_core_IntCache();
		this.caches.push(cache);
		return function(col) {
			if(cache.cache[col] != null) {
				return cache.cache[col];
			}
			var v = 0.0;
			var vCalculated;
			var _g = f(col);
			switch(_g[1]) {
			case 0:
				vCalculated = _g[2];
				break;
			case 1:
				var el = _gthis.renderAt(0,col);
				dots_Dom.append(_gthis.view,el);
				v = Math.max(0.0,el.offsetWidth);
				_gthis.view.removeChild(el);
				vCalculated = v;
				break;
			case 2:
				var els = [];
				var el1;
				var a = _gthis.fixedTop + 1;
				var a1 = a > 2?a:2;
				var b = _gthis.rows;
				var topBound = a1 < b?a1:b;
				var _g1 = 0;
				var _g2 = topBound;
				while(_g1 < _g2) {
					el1 = _gthis.renderAt(_g1++,col);
					els.push(el1);
					dots_Dom.append(_gthis.view,el1);
				}
				var a2 = _gthis.rows - _gthis.fixedBottom - 1;
				var b1 = topBound + 1;
				var _g11 = a2 > b1?a2:b1;
				var _g3 = _gthis.rows;
				while(_g11 < _g3) {
					el1 = _gthis.renderAt(_g11++,col);
					els.push(el1);
					dots_Dom.append(_gthis.view,el1);
				}
				var _g4 = 0;
				while(_g4 < els.length) {
					var el2 = els[_g4];
					++_g4;
					v = Math.max(v,el2.offsetWidth);
				}
				var _g5 = 0;
				while(_g5 < els.length) {
					var el3 = els[_g5];
					++_g5;
					_gthis.view.removeChild(el3);
				}
				vCalculated = v;
				break;
			case 3:
				var els1 = [];
				var el4;
				var _g12 = 0;
				var _g6 = _gthis.rows;
				while(_g12 < _g6) {
					el4 = _gthis.renderAt(_g12++,col);
					els1.push(el4);
					dots_Dom.append(_gthis.view,el4);
				}
				var _g7 = 0;
				while(_g7 < els1.length) {
					var el5 = els1[_g7];
					++_g7;
					v = Math.max(v,el5.offsetWidth);
				}
				var _g8 = 0;
				while(_g8 < els1.length) {
					var el6 = els1[_g8];
					++_g8;
					_gthis.view.removeChild(el6);
				}
				vCalculated = v;
				break;
			}
			cache.cache[col] = vCalculated;
			return vCalculated;
		};
	}
	,assignVOffset: function(f) {
		var _gthis = this;
		if(null != f) {
			return f;
		}
		var cache = new fancy_core_IntCache();
		this.caches.push(cache);
		return function(row) {
			if(row == 0) {
				return 0;
			}
			if(cache.cache[row] != null) {
				return cache.cache[row];
			}
			var v = _gthis.vOffset(row - 1) + _gthis.vSize(row - 1);
			cache.cache[row] = v;
			return v;
		};
	}
	,assignHOffset: function(f) {
		var _gthis = this;
		if(null != f) {
			return f;
		}
		var cache = new fancy_core_IntCache();
		this.caches.push(cache);
		return function(col) {
			if(col == 0) {
				return 0;
			}
			if(cache.cache[col] != null) {
				return cache.cache[col];
			}
			var v = _gthis.hOffset(col - 1) + _gthis.hSize(col - 1);
			cache.cache[col] = v;
			return v;
		};
	}
	,renderAt: function(row,col) {
		var el = this.cacheElement.get(row,col);
		if(null == el) {
			el = window.document.createElement("div");
			el.className = "cell row-" + row + " col-" + col;
			el.appendChild(this.render(row,col));
			this.cacheElement.set(row,col,el);
		}
		return el;
	}
	,renderTo: function(parent,row,col) {
		var el = this.renderAt(row,col);
		dots_Dom.append(parent,el);
		el.style.top = "" + this.vOffset(row) + "px";
		el.style.left = "" + this.hOffset(col) + "px";
		el.style.width = "" + this.hSize(col) + "px";
		el.style.height = "" + this.vSize(row) + "px";
		return el;
	}
	,renderMiddle: function(v) {
		var a = fancy_core_Search.binary(0,this.rows,this.rowComparator(v + this.topRailSize));
		var b = this.fixedTop;
		var r = a > b?a:b;
		var top = this.vOffset(r);
		var limit = top + this.vSize(r) + this.grid9.get_gridMiddleHeight();
		dots_Dom.empty(this.grid9.middleLeft);
		dots_Dom.empty(this.grid9.middleRight);
		var doc = null;
		if(null == doc) {
			doc = window.document;
		}
		var el = doc.createElement("div");
		var _g = 0;
		var _g1 = [{ value : "anchor middle left", name : "class"}];
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			el.setAttribute(o.name,o.value);
		}
		var attrs = null;
		if(null != attrs) {
			var tmp = attrs.keys();
			while(tmp.hasNext()) {
				var attr = tmp.next();
				el.setAttribute(attr,__map_reserved[attr] != null?attrs.getReserved(attr):attrs.h[attr]);
			}
		}
		var children = null;
		if(null != children) {
			var _g2 = 0;
			while(_g2 < children.length) {
				var child = children[_g2];
				++_g2;
				el.appendChild(child);
			}
		}
		var textContent = null;
		if(null != textContent) {
			el.appendChild(doc.createTextNode(textContent));
		}
		var leftAnchor = el;
		var doc1 = null;
		if(null == doc1) {
			doc1 = window.document;
		}
		var el1 = doc1.createElement("div");
		var _g3 = 0;
		var _g11 = [{ value : "anchor middle right", name : "class"}];
		while(_g3 < _g11.length) {
			var o1 = _g11[_g3];
			++_g3;
			el1.setAttribute(o1.name,o1.value);
		}
		var attrs1 = null;
		if(null != attrs1) {
			var tmp1 = attrs1.keys();
			while(tmp1.hasNext()) {
				var attr1 = tmp1.next();
				el1.setAttribute(attr1,__map_reserved[attr1] != null?attrs1.getReserved(attr1):attrs1.h[attr1]);
			}
		}
		var children1 = null;
		if(null != children1) {
			var _g4 = 0;
			while(_g4 < children1.length) {
				var child1 = children1[_g4];
				++_g4;
				el1.appendChild(child1);
			}
		}
		var textContent1 = null;
		if(null != textContent1) {
			el1.appendChild(doc1.createTextNode(textContent1));
		}
		var rightAnchor = el1;
		var a1 = this.fixedLeft;
		var b1 = this.columns;
		var leftCols = a1 < b1?a1:b1;
		var a2 = this.columns - this.fixedRight;
		var b2 = this.columns;
		var rightCols = a2 < b2?a2:b2;
		leftAnchor.style.top = "" + -this.topRailSize + "px";
		rightAnchor.style.top = "" + -this.topRailSize + "px";
		rightAnchor.style.left = "" + -this.hOffset(rightCols) + "px";
		dots_Dom.append(this.grid9.middleLeft,leftAnchor);
		dots_Dom.append(this.grid9.middleRight,rightAnchor);
		while(r < this.rows - this.fixedBottom && top < limit + this.vSize(r)) {
			var _g12 = 0;
			var _g5 = leftCols;
			while(_g12 < _g5) this.renderTo(leftAnchor,r,_g12++);
			var _g13 = rightCols;
			var _g6 = this.columns;
			while(_g13 < _g6) this.renderTo(rightAnchor,r,_g13++);
			top += this.vSize(r++);
		}
	}
	,renderCenter: function(v) {
		var a = fancy_core_Search.binary(0,this.columns,this.columnComparator(v + this.leftRailSize));
		var b = this.fixedLeft;
		var c = a > b?a:b;
		var left = this.hOffset(c);
		var limit = left + this.hSize(c) + this.grid9.get_gridCenterWidth();
		dots_Dom.empty(this.grid9.topCenter);
		dots_Dom.empty(this.grid9.bottomCenter);
		var doc = null;
		if(null == doc) {
			doc = window.document;
		}
		var el = doc.createElement("div");
		var _g = 0;
		var _g1 = [{ value : "anchor top center", name : "class"}];
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			el.setAttribute(o.name,o.value);
		}
		var attrs = null;
		if(null != attrs) {
			var tmp = attrs.keys();
			while(tmp.hasNext()) {
				var attr = tmp.next();
				el.setAttribute(attr,__map_reserved[attr] != null?attrs.getReserved(attr):attrs.h[attr]);
			}
		}
		var children = null;
		if(null != children) {
			var _g2 = 0;
			while(_g2 < children.length) {
				var child = children[_g2];
				++_g2;
				el.appendChild(child);
			}
		}
		var textContent = null;
		if(null != textContent) {
			el.appendChild(doc.createTextNode(textContent));
		}
		var topAnchor = el;
		var doc1 = null;
		if(null == doc1) {
			doc1 = window.document;
		}
		var el1 = doc1.createElement("div");
		var _g3 = 0;
		var _g11 = [{ value : "anchor bottom center", name : "class"}];
		while(_g3 < _g11.length) {
			var o1 = _g11[_g3];
			++_g3;
			el1.setAttribute(o1.name,o1.value);
		}
		var attrs1 = null;
		if(null != attrs1) {
			var tmp1 = attrs1.keys();
			while(tmp1.hasNext()) {
				var attr1 = tmp1.next();
				el1.setAttribute(attr1,__map_reserved[attr1] != null?attrs1.getReserved(attr1):attrs1.h[attr1]);
			}
		}
		var children1 = null;
		if(null != children1) {
			var _g4 = 0;
			while(_g4 < children1.length) {
				var child1 = children1[_g4];
				++_g4;
				el1.appendChild(child1);
			}
		}
		var textContent1 = null;
		if(null != textContent1) {
			el1.appendChild(doc1.createTextNode(textContent1));
		}
		var bottomAnchor = el1;
		var a1 = this.fixedTop;
		var b1 = this.rows;
		var topRows = a1 < b1?a1:b1;
		var a2 = this.rows - this.fixedBottom;
		var b2 = this.rows;
		var bottomRows = a2 < b2?a2:b2;
		topAnchor.style.left = "" + -this.leftRailSize + "px";
		bottomAnchor.style.top = "" + -this.vOffset(bottomRows) + "px";
		bottomAnchor.style.left = "" + -this.leftRailSize + "px";
		dots_Dom.append(this.grid9.topCenter,topAnchor);
		dots_Dom.append(this.grid9.bottomCenter,bottomAnchor);
		while(c < this.columns - this.fixedRight && left < limit + this.hSize(c)) {
			var _g12 = 0;
			var _g5 = topRows;
			while(_g12 < _g5) this.renderTo(topAnchor,_g12++,c);
			var _g13 = bottomRows;
			var _g6 = this.rows;
			while(_g13 < _g6) this.renderTo(bottomAnchor,_g13++,c);
			left += this.hSize(c++);
		}
	}
	,renderMain: function(x,y) {
		var a = fancy_core_Search.binary(0,this.rows,this.rowComparator(y + this.topRailSize));
		var b = this.fixedTop;
		var r = a > b?a:b;
		var a1 = fancy_core_Search.binary(0,this.columns,this.columnComparator(x + this.leftRailSize));
		var b1 = this.fixedLeft;
		var c = a1 > b1?a1:b1;
		var left = this.hOffset(c);
		var top = this.vOffset(r);
		var hlimit = left + this.hSize(c) + this.grid9.get_gridCenterWidth();
		var vlimit = top + this.vSize(r) + this.grid9.get_gridMiddleHeight();
		dots_Dom.empty(this.grid9.middleCenter);
		var doc = null;
		if(null == doc) {
			doc = window.document;
		}
		var el = doc.createElement("div");
		var _g = 0;
		var _g1 = [{ value : "anchor middle center", name : "class"}];
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			el.setAttribute(o.name,o.value);
		}
		var attrs = null;
		if(null != attrs) {
			var tmp = attrs.keys();
			while(tmp.hasNext()) {
				var attr = tmp.next();
				el.setAttribute(attr,__map_reserved[attr] != null?attrs.getReserved(attr):attrs.h[attr]);
			}
		}
		var children = null;
		if(null != children) {
			var _g2 = 0;
			while(_g2 < children.length) {
				var child = children[_g2];
				++_g2;
				el.appendChild(child);
			}
		}
		var textContent = null;
		if(null != textContent) {
			el.appendChild(doc.createTextNode(textContent));
		}
		var anchor = el;
		anchor.style.top = "-" + this.topRailSize + "px";
		anchor.style.left = "-" + this.leftRailSize + "px";
		dots_Dom.append(this.grid9.middleCenter,anchor);
		while(r < this.rows - this.fixedBottom && top < vlimit + this.vSize(r)) {
			var tleft = left;
			var tc = c;
			while(tc < this.columns - this.fixedRight && tleft < hlimit + this.hSize(tc)) {
				this.renderTo(anchor,r,tc);
				tleft += this.hSize(tc++);
			}
			top += this.vSize(r++);
		}
	}
	,rowComparator: function(v) {
		var _gthis = this;
		return function(r) {
			var tv = _gthis.vOffset(r);
			if(tv > v) {
				return 1;
			}
			if(tv + _gthis.vSize(r) >= v) {
				return 0;
			}
			return -1;
		};
	}
	,columnComparator: function(v) {
		var _gthis = this;
		return function(r) {
			var tv = _gthis.hOffset(r);
			if(tv > v) {
				return 1;
			}
			if(tv + _gthis.hSize(r) >= v) {
				return 0;
			}
			return -1;
		};
	}
	,renderCorners: function() {
		var a = this.fixedTop;
		var b = this.rows;
		var top = a < b?a:b;
		var a1 = this.rows - this.fixedBottom;
		var bottom = a1 > 0?a1:0;
		var a2 = this.fixedLeft;
		var b1 = this.columns;
		var left = a2 < b1?a2:b1;
		var a3 = this.columns - this.fixedRight;
		var right = a3 > 0?a3:0;
		var doc = null;
		if(null == doc) {
			doc = window.document;
		}
		var el = doc.createElement("div");
		var _g = 0;
		var _g1 = [{ value : "anchor bottom left", name : "class"}];
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			el.setAttribute(o.name,o.value);
		}
		var attrs = null;
		if(null != attrs) {
			var tmp = attrs.keys();
			while(tmp.hasNext()) {
				var attr = tmp.next();
				el.setAttribute(attr,__map_reserved[attr] != null?attrs.getReserved(attr):attrs.h[attr]);
			}
		}
		var children = null;
		if(null != children) {
			var _g2 = 0;
			while(_g2 < children.length) {
				var child = children[_g2];
				++_g2;
				el.appendChild(child);
			}
		}
		var textContent = null;
		if(null != textContent) {
			el.appendChild(doc.createTextNode(textContent));
		}
		var bottomLeftAnchor = el;
		var doc1 = null;
		if(null == doc1) {
			doc1 = window.document;
		}
		var el1 = doc1.createElement("div");
		var _g3 = 0;
		var _g11 = [{ value : "anchor bottom right", name : "class"}];
		while(_g3 < _g11.length) {
			var o1 = _g11[_g3];
			++_g3;
			el1.setAttribute(o1.name,o1.value);
		}
		var attrs1 = null;
		if(null != attrs1) {
			var tmp1 = attrs1.keys();
			while(tmp1.hasNext()) {
				var attr1 = tmp1.next();
				el1.setAttribute(attr1,__map_reserved[attr1] != null?attrs1.getReserved(attr1):attrs1.h[attr1]);
			}
		}
		var children1 = null;
		if(null != children1) {
			var _g4 = 0;
			while(_g4 < children1.length) {
				var child1 = children1[_g4];
				++_g4;
				el1.appendChild(child1);
			}
		}
		var textContent1 = null;
		if(null != textContent1) {
			el1.appendChild(doc1.createTextNode(textContent1));
		}
		var bottomRightAnchor = el1;
		var doc2 = null;
		if(null == doc2) {
			doc2 = window.document;
		}
		var el2 = doc2.createElement("div");
		var _g5 = 0;
		var _g12 = [{ value : "anchor top left", name : "class"}];
		while(_g5 < _g12.length) {
			var o2 = _g12[_g5];
			++_g5;
			el2.setAttribute(o2.name,o2.value);
		}
		var attrs2 = null;
		if(null != attrs2) {
			var tmp2 = attrs2.keys();
			while(tmp2.hasNext()) {
				var attr2 = tmp2.next();
				el2.setAttribute(attr2,__map_reserved[attr2] != null?attrs2.getReserved(attr2):attrs2.h[attr2]);
			}
		}
		var children2 = null;
		if(null != children2) {
			var _g6 = 0;
			while(_g6 < children2.length) {
				var child2 = children2[_g6];
				++_g6;
				el2.appendChild(child2);
			}
		}
		var textContent2 = null;
		if(null != textContent2) {
			el2.appendChild(doc2.createTextNode(textContent2));
		}
		var topLeftAnchor = el2;
		var doc3 = null;
		if(null == doc3) {
			doc3 = window.document;
		}
		var el3 = doc3.createElement("div");
		var _g7 = 0;
		var _g13 = [{ value : "anchor top right", name : "class"}];
		while(_g7 < _g13.length) {
			var o3 = _g13[_g7];
			++_g7;
			el3.setAttribute(o3.name,o3.value);
		}
		var attrs3 = null;
		if(null != attrs3) {
			var tmp3 = attrs3.keys();
			while(tmp3.hasNext()) {
				var attr3 = tmp3.next();
				el3.setAttribute(attr3,__map_reserved[attr3] != null?attrs3.getReserved(attr3):attrs3.h[attr3]);
			}
		}
		var children3 = null;
		if(null != children3) {
			var _g8 = 0;
			while(_g8 < children3.length) {
				var child3 = children3[_g8];
				++_g8;
				el3.appendChild(child3);
			}
		}
		var textContent3 = null;
		if(null != textContent3) {
			el3.appendChild(doc3.createTextNode(textContent3));
		}
		var topRightAnchor = el3;
		var vDelta = this.vOffset(bottom);
		var hDelta = this.hOffset(right);
		bottomRightAnchor.style.left = "" + -hDelta + "px";
		bottomRightAnchor.style.top = "" + -vDelta + "px";
		bottomLeftAnchor.style.top = "" + -vDelta + "px";
		topRightAnchor.style.left = "" + -hDelta + "px";
		dots_Dom.empty(this.topLeft);
		dots_Dom.empty(this.topRight);
		dots_Dom.append(this.topLeft,topLeftAnchor);
		dots_Dom.append(this.topRight,topRightAnchor);
		var _g14 = 0;
		var _g9 = top;
		while(_g14 < _g9) {
			var r = _g14++;
			var _g31 = 0;
			var _g21 = left;
			while(_g31 < _g21) this.renderTo(topLeftAnchor,r,_g31++);
			var _g32 = right;
			var _g22 = this.columns;
			while(_g32 < _g22) this.renderTo(topRightAnchor,r,_g32++);
		}
		dots_Dom.empty(this.bottomLeft);
		dots_Dom.empty(this.bottomRight);
		dots_Dom.append(this.bottomLeft,bottomLeftAnchor);
		dots_Dom.append(this.bottomRight,bottomRightAnchor);
		var _g15 = bottom;
		var _g10 = this.rows;
		while(_g15 < _g10) {
			var r1 = _g15++;
			var _g33 = 0;
			var _g23 = left;
			while(_g33 < _g23) this.renderTo(bottomLeftAnchor,r1,_g33++);
			var _g34 = right;
			var _g24 = this.columns;
			while(_g34 < _g24) this.renderTo(bottomRightAnchor,r1,_g34++);
		}
	}
};
var fancy_FancyTableData = { __ename__ : true, __constructs__ : ["Tabular","Nested"] };
fancy_FancyTableData.Tabular = function(data) { var $x = ["Tabular",0,data]; $x.__enum__ = fancy_FancyTableData; $x.toString = $estr; return $x; };
fancy_FancyTableData.Nested = function(data) { var $x = ["Nested",1,data]; $x.__enum__ = fancy_FancyTableData; $x.toString = $estr; return $x; };
var fancy_Table = function(parent,data,options) {
	this.maxColumns = 0;
	this.visibleRows = [];
	this.rows = [];
	var _gthis = this;
	this.settings = fancy_table_FancyTableSettings.fromOptions(options);
	this.grid = new fancy_Grid(parent,{ rows : 1, columns : 3, render : $bind(this,this.renderGridCell), fixedLeft : this.settings.fixedLeft, fixedTop : this.settings.fixedTop, vSize : $bind(this,this.assignVSize), hSize : function(col) {
		return _gthis.settings.hSize(col,_gthis.maxColumns);
	}});
	this.setData(data);
};
fancy_Table.__name__ = true;
fancy_Table.flattenVisibleRows = function(rows) {
	return thx_Arrays.reduce(rows,function(acc,r) {
		var children = r.expanded?r.rows:[];
		return thx_Arrays.append(acc,r).concat(fancy_Table.flattenVisibleRows(children));
	},[]);
};
fancy_Table.insertRowAt = function(table,index,newRow) {
	var a = table.maxColumns;
	var b = newRow.cells.length;
	table.maxColumns = a > b?a:b;
	table.rows.splice(index,0,newRow);
	return table;
};
fancy_Table.tableAppendRow = function(table,row) {
	return fancy_Table.insertRowAt(table,table.rows.length,row);
};
fancy_Table.prototype = {
	assignVSize: function(row) {
		return thx_Options.cata(thx_Arrays.getOption(this.visibleRows,row),fancy_CellDimension.Fixed(0),function(r) {
			return r.height;
		});
	}
	,renderGridCell: function(row,col) {
		var _gthis = this;
		var _e = thx_Arrays.getOption(this.visibleRows,row);
		return thx_Options.getOrElse((function(callback) {
			return thx_Options.flatMap(_e,callback);
		})(function(_) {
			return _.renderCell(_gthis,row,col);
		}),fancy_table_util__$CellContent_CellContent_$Impl_$.render(this.settings.fallbackCell,"ft-cell-content",this,row,col));
	}
	,setData: function(data) {
		switch(data[1]) {
		case 0:
			var table = this;
			thx_Arrays.reduce(data[2].map(function(_) {
				return new fancy_table_Row(_,table.settings.classes,fancy_CellDimension.RenderSmart);
			}),fancy_Table.tableAppendRow,table);
			break;
		case 1:
			thx_Arrays.reduce(fancy_table_util_NestedData.toRows(data[2],this.settings.classes),fancy_Table.tableAppendRow,this);
			break;
		}
		this.visibleRows = fancy_Table.flattenVisibleRows(this.rows);
		this.grid.setRowsAndColumns(this.visibleRows.length,this.maxColumns);
		return this;
	}
	,toggleRow: function(index) {
		var _gthis = this;
		thx_Options.map(thx_Arrays.getOption(this.visibleRows,index),function(r) {
			r.toggle();
			_gthis.visibleRows = fancy_Table.flattenVisibleRows(_gthis.rows);
			_gthis.grid.setRowsAndColumns(_gthis.visibleRows.length,_gthis.maxColumns);
		});
	}
};
var fancy_core_DragMoveHelper = function(el,callback) {
	var _gthis = this;
	this.el = el;
	el.addEventListener("mousedown",function(e) {
		if(_gthis.moving) {
			return;
		}
		e.preventDefault();
		_gthis.moving = true;
		_gthis.x = e.clientX;
		_gthis.y = e.clientY;
	});
	window.document.addEventListener("mousemove",function(e1) {
		if(!_gthis.moving) {
			return;
		}
		e1.preventDefault();
		dots_Dom.toggleClass(el,"dragging",true);
		var dx = e1.clientX - _gthis.x;
		var dy = e1.clientY - _gthis.y;
		_gthis.x = e1.clientX;
		_gthis.y = e1.clientY;
		callback(dx,dy);
	});
	window.document.addEventListener("mouseup",function(e2) {
		if(!_gthis.moving) {
			return;
		}
		e2.preventDefault();
		dots_Dom.toggleClass(el,"dragging",false);
		_gthis.moving = false;
	});
};
fancy_core_DragMoveHelper.__name__ = true;
var fancy_core_Grid9 = function(parent,options) {
	var _gthis = this;
	this.position = { x : 0.0, y : 0.0};
	var _0 = options;
	var t;
	if(null == _0) {
		t = null;
	} else {
		var _1 = _0.onScroll;
		if(null == _1) {
			t = null;
		} else {
			t = _1;
		}
	}
	this.onScroll = t != null?t:function(x,y,ox,oy) {
	};
	var _01 = options;
	var t1;
	if(null == _01) {
		t1 = null;
	} else {
		var _11 = _01.onResize;
		if(null == _11) {
			t1 = null;
		} else {
			t1 = _11;
		}
	}
	this.onResize = t1 != null?t1:function(w,h,ow,oh) {
	};
	var offset = function() {
		if(_gthis.contentWidth > _gthis.gridWidth && _gthis.contentHeight > _gthis.gridHeight) {
			return _gthis.scrollerSize + _gthis.scrollerMargin;
		} else {
			return 0;
		}
	};
	var viewHeight = $bind(this,this.get_gridMiddleHeight);
	var contentHeight = function() {
		return _gthis.contentHeight - _gthis.topRail - _gthis.bottomRail;
	};
	var viewWidth = $bind(this,this.get_gridCenterWidth);
	var contentWidth = function() {
		return _gthis.contentWidth - _gthis.leftRail - _gthis.rightRail;
	};
	var minScrollerSize;
	if(null != options.scrollerMinSize) {
		var v = options.scrollerMinSize;
		minScrollerSize = function() {
			return v;
		};
	} else {
		minScrollerSize = null;
	}
	var maxScrollerSize;
	if(null != options.scrollerMaxSize) {
		var v1 = options.scrollerMaxSize;
		maxScrollerSize = function() {
			return v1;
		};
	} else {
		maxScrollerSize = null;
	}
	this.scrollerVDimensions = new fancy_core_ScrollerDimensions({ viewSize : viewHeight, contentSize : contentHeight, scrollerArea : fancy_core__$Lazy_Lazy_$Impl_$.subtract(viewHeight,offset), minScrollerSize : minScrollerSize, maxScrollerSize : maxScrollerSize});
	this.scrollerHDimensions = new fancy_core_ScrollerDimensions({ viewSize : viewWidth, contentSize : contentWidth, scrollerArea : fancy_core__$Lazy_Lazy_$Impl_$.subtract(viewWidth,offset), minScrollerSize : minScrollerSize, maxScrollerSize : maxScrollerSize});
	this.scrollerSize = options.scrollerSize;
	var _02 = options;
	var t2;
	if(null == _02) {
		t2 = null;
	} else {
		var _12 = _02.scrollerMargin;
		if(null == _12) {
			t2 = null;
		} else {
			t2 = _12;
		}
	}
	this.scrollerMargin = t2 != null?t2:0;
	var doc = null;
	if(null == doc) {
		doc = window.document;
	}
	var el = doc.createElement("div");
	var _g = 0;
	var _g1 = [{ value : "grid9", name : "class"}];
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		el.setAttribute(o.name,o.value);
	}
	var attrs = null;
	if(null != attrs) {
		var tmp = attrs.keys();
		while(tmp.hasNext()) {
			var attr = tmp.next();
			el.setAttribute(attr,__map_reserved[attr] != null?attrs.getReserved(attr):attrs.h[attr]);
		}
	}
	var doc1 = null;
	if(null == doc1) {
		doc1 = window.document;
	}
	var el1 = doc1.createElement("div");
	var _g2 = 0;
	var _g11 = [{ value : "scroller scroller-v", name : "class"}];
	while(_g2 < _g11.length) {
		var o1 = _g11[_g2];
		++_g2;
		el1.setAttribute(o1.name,o1.value);
	}
	var attrs1 = null;
	if(null != attrs1) {
		var tmp1 = attrs1.keys();
		while(tmp1.hasNext()) {
			var attr1 = tmp1.next();
			el1.setAttribute(attr1,__map_reserved[attr1] != null?attrs1.getReserved(attr1):attrs1.h[attr1]);
		}
	}
	var children = null;
	if(null != children) {
		var _g3 = 0;
		while(_g3 < children.length) {
			var child = children[_g3];
			++_g3;
			el1.appendChild(child);
		}
	}
	var textContent = null;
	if(null != textContent) {
		el1.appendChild(doc1.createTextNode(textContent));
	}
	var tmp2 = el1;
	var doc2 = null;
	if(null == doc2) {
		doc2 = window.document;
	}
	var el2 = doc2.createElement("div");
	var _g4 = 0;
	var _g12 = [{ value : "scroller scroller-h", name : "class"}];
	while(_g4 < _g12.length) {
		var o2 = _g12[_g4];
		++_g4;
		el2.setAttribute(o2.name,o2.value);
	}
	var attrs2 = null;
	if(null != attrs2) {
		var tmp3 = attrs2.keys();
		while(tmp3.hasNext()) {
			var attr2 = tmp3.next();
			el2.setAttribute(attr2,__map_reserved[attr2] != null?attrs2.getReserved(attr2):attrs2.h[attr2]);
		}
	}
	var children1 = null;
	if(null != children1) {
		var _g5 = 0;
		while(_g5 < children1.length) {
			var child1 = children1[_g5];
			++_g5;
			el2.appendChild(child1);
		}
	}
	var textContent1 = null;
	if(null != textContent1) {
		el2.appendChild(doc2.createTextNode(textContent1));
	}
	var tmp4 = el2;
	var doc3 = null;
	if(null == doc3) {
		doc3 = window.document;
	}
	var el3 = doc3.createElement("div");
	var _g6 = 0;
	var _g13 = [{ value : "row top", name : "class"}];
	while(_g6 < _g13.length) {
		var o3 = _g13[_g6];
		++_g6;
		el3.setAttribute(o3.name,o3.value);
	}
	var attrs3 = null;
	if(null != attrs3) {
		var tmp5 = attrs3.keys();
		while(tmp5.hasNext()) {
			var attr3 = tmp5.next();
			el3.setAttribute(attr3,__map_reserved[attr3] != null?attrs3.getReserved(attr3):attrs3.h[attr3]);
		}
	}
	var children2 = null;
	if(null != children2) {
		var _g7 = 0;
		while(_g7 < children2.length) {
			var child2 = children2[_g7];
			++_g7;
			el3.appendChild(child2);
		}
	}
	var textContent2 = null;
	if(null != textContent2) {
		el3.appendChild(doc3.createTextNode(textContent2));
	}
	var tmp6 = el3;
	var doc4 = null;
	if(null == doc4) {
		doc4 = window.document;
	}
	var el4 = doc4.createElement("div");
	var _g8 = 0;
	var _g14 = [{ value : "row bottom", name : "class"}];
	while(_g8 < _g14.length) {
		var o4 = _g14[_g8];
		++_g8;
		el4.setAttribute(o4.name,o4.value);
	}
	var attrs4 = null;
	if(null != attrs4) {
		var tmp7 = attrs4.keys();
		while(tmp7.hasNext()) {
			var attr4 = tmp7.next();
			el4.setAttribute(attr4,__map_reserved[attr4] != null?attrs4.getReserved(attr4):attrs4.h[attr4]);
		}
	}
	var children3 = null;
	if(null != children3) {
		var _g9 = 0;
		while(_g9 < children3.length) {
			var child3 = children3[_g9];
			++_g9;
			el4.appendChild(child3);
		}
	}
	var textContent3 = null;
	if(null != textContent3) {
		el4.appendChild(doc4.createTextNode(textContent3));
	}
	var tmp8 = el4;
	var doc5 = null;
	if(null == doc5) {
		doc5 = window.document;
	}
	var el5 = doc5.createElement("div");
	var _g10 = 0;
	var _g15 = [{ value : "column left", name : "class"}];
	while(_g10 < _g15.length) {
		var o5 = _g15[_g10];
		++_g10;
		el5.setAttribute(o5.name,o5.value);
	}
	var attrs5 = null;
	if(null != attrs5) {
		var tmp9 = attrs5.keys();
		while(tmp9.hasNext()) {
			var attr5 = tmp9.next();
			el5.setAttribute(attr5,__map_reserved[attr5] != null?attrs5.getReserved(attr5):attrs5.h[attr5]);
		}
	}
	var children4 = null;
	if(null != children4) {
		var _g16 = 0;
		while(_g16 < children4.length) {
			var child4 = children4[_g16];
			++_g16;
			el5.appendChild(child4);
		}
	}
	var textContent4 = null;
	if(null != textContent4) {
		el5.appendChild(doc5.createTextNode(textContent4));
	}
	var tmp10 = el5;
	var doc6 = null;
	if(null == doc6) {
		doc6 = window.document;
	}
	var el6 = doc6.createElement("div");
	var _g17 = 0;
	var _g18 = [{ value : "column right", name : "class"}];
	while(_g17 < _g18.length) {
		var o6 = _g18[_g17];
		++_g17;
		el6.setAttribute(o6.name,o6.value);
	}
	var attrs6 = null;
	if(null != attrs6) {
		var tmp11 = attrs6.keys();
		while(tmp11.hasNext()) {
			var attr6 = tmp11.next();
			el6.setAttribute(attr6,__map_reserved[attr6] != null?attrs6.getReserved(attr6):attrs6.h[attr6]);
		}
	}
	var children5 = null;
	if(null != children5) {
		var _g19 = 0;
		while(_g19 < children5.length) {
			var child5 = children5[_g19];
			++_g19;
			el6.appendChild(child5);
		}
	}
	var textContent5 = null;
	if(null != textContent5) {
		el6.appendChild(doc6.createTextNode(textContent5));
	}
	var tmp12 = el6;
	var doc7 = null;
	if(null == doc7) {
		doc7 = window.document;
	}
	var el7 = doc7.createElement("div");
	var _g20 = 0;
	var _g110 = [{ value : "pane top left", name : "class"}];
	while(_g20 < _g110.length) {
		var o7 = _g110[_g20];
		++_g20;
		el7.setAttribute(o7.name,o7.value);
	}
	var attrs7 = null;
	if(null != attrs7) {
		var tmp13 = attrs7.keys();
		while(tmp13.hasNext()) {
			var attr7 = tmp13.next();
			el7.setAttribute(attr7,__map_reserved[attr7] != null?attrs7.getReserved(attr7):attrs7.h[attr7]);
		}
	}
	var children6 = null;
	if(null != children6) {
		var _g21 = 0;
		while(_g21 < children6.length) {
			var child6 = children6[_g21];
			++_g21;
			el7.appendChild(child6);
		}
	}
	var textContent6 = null;
	if(null != textContent6) {
		el7.appendChild(doc7.createTextNode(textContent6));
	}
	var tmp14 = el7;
	var doc8 = null;
	if(null == doc8) {
		doc8 = window.document;
	}
	var el8 = doc8.createElement("div");
	var _g22 = 0;
	var _g111 = [{ value : "pane top center", name : "class"}];
	while(_g22 < _g111.length) {
		var o8 = _g111[_g22];
		++_g22;
		el8.setAttribute(o8.name,o8.value);
	}
	var attrs8 = null;
	if(null != attrs8) {
		var tmp15 = attrs8.keys();
		while(tmp15.hasNext()) {
			var attr8 = tmp15.next();
			el8.setAttribute(attr8,__map_reserved[attr8] != null?attrs8.getReserved(attr8):attrs8.h[attr8]);
		}
	}
	var children7 = null;
	if(null != children7) {
		var _g23 = 0;
		while(_g23 < children7.length) {
			var child7 = children7[_g23];
			++_g23;
			el8.appendChild(child7);
		}
	}
	var textContent7 = null;
	if(null != textContent7) {
		el8.appendChild(doc8.createTextNode(textContent7));
	}
	var tmp16 = el8;
	var doc9 = null;
	if(null == doc9) {
		doc9 = window.document;
	}
	var el9 = doc9.createElement("div");
	var _g24 = 0;
	var _g112 = [{ value : "pane top right", name : "class"}];
	while(_g24 < _g112.length) {
		var o9 = _g112[_g24];
		++_g24;
		el9.setAttribute(o9.name,o9.value);
	}
	var attrs9 = null;
	if(null != attrs9) {
		var tmp17 = attrs9.keys();
		while(tmp17.hasNext()) {
			var attr9 = tmp17.next();
			el9.setAttribute(attr9,__map_reserved[attr9] != null?attrs9.getReserved(attr9):attrs9.h[attr9]);
		}
	}
	var children8 = null;
	if(null != children8) {
		var _g25 = 0;
		while(_g25 < children8.length) {
			var child8 = children8[_g25];
			++_g25;
			el9.appendChild(child8);
		}
	}
	var textContent8 = null;
	if(null != textContent8) {
		el9.appendChild(doc9.createTextNode(textContent8));
	}
	var tmp18 = el9;
	var doc10 = null;
	if(null == doc10) {
		doc10 = window.document;
	}
	var el10 = doc10.createElement("div");
	var _g26 = 0;
	var _g113 = [{ value : "pane middle left", name : "class"}];
	while(_g26 < _g113.length) {
		var o10 = _g113[_g26];
		++_g26;
		el10.setAttribute(o10.name,o10.value);
	}
	var attrs10 = null;
	if(null != attrs10) {
		var tmp19 = attrs10.keys();
		while(tmp19.hasNext()) {
			var attr10 = tmp19.next();
			el10.setAttribute(attr10,__map_reserved[attr10] != null?attrs10.getReserved(attr10):attrs10.h[attr10]);
		}
	}
	var children9 = null;
	if(null != children9) {
		var _g27 = 0;
		while(_g27 < children9.length) {
			var child9 = children9[_g27];
			++_g27;
			el10.appendChild(child9);
		}
	}
	var textContent9 = null;
	if(null != textContent9) {
		el10.appendChild(doc10.createTextNode(textContent9));
	}
	var tmp20 = el10;
	var doc11 = null;
	if(null == doc11) {
		doc11 = window.document;
	}
	var el11 = doc11.createElement("div");
	var _g28 = 0;
	var _g114 = [{ value : "pane middle center", name : "class"}];
	while(_g28 < _g114.length) {
		var o11 = _g114[_g28];
		++_g28;
		el11.setAttribute(o11.name,o11.value);
	}
	var attrs11 = null;
	if(null != attrs11) {
		var tmp21 = attrs11.keys();
		while(tmp21.hasNext()) {
			var attr11 = tmp21.next();
			el11.setAttribute(attr11,__map_reserved[attr11] != null?attrs11.getReserved(attr11):attrs11.h[attr11]);
		}
	}
	var children10 = null;
	if(null != children10) {
		var _g29 = 0;
		while(_g29 < children10.length) {
			var child10 = children10[_g29];
			++_g29;
			el11.appendChild(child10);
		}
	}
	var textContent10 = null;
	if(null != textContent10) {
		el11.appendChild(doc11.createTextNode(textContent10));
	}
	var tmp22 = el11;
	var doc12 = null;
	if(null == doc12) {
		doc12 = window.document;
	}
	var el12 = doc12.createElement("div");
	var _g30 = 0;
	var _g115 = [{ value : "pane middle right", name : "class"}];
	while(_g30 < _g115.length) {
		var o12 = _g115[_g30];
		++_g30;
		el12.setAttribute(o12.name,o12.value);
	}
	var attrs12 = null;
	if(null != attrs12) {
		var tmp23 = attrs12.keys();
		while(tmp23.hasNext()) {
			var attr12 = tmp23.next();
			el12.setAttribute(attr12,__map_reserved[attr12] != null?attrs12.getReserved(attr12):attrs12.h[attr12]);
		}
	}
	var children11 = null;
	if(null != children11) {
		var _g31 = 0;
		while(_g31 < children11.length) {
			var child11 = children11[_g31];
			++_g31;
			el12.appendChild(child11);
		}
	}
	var textContent11 = null;
	if(null != textContent11) {
		el12.appendChild(doc12.createTextNode(textContent11));
	}
	var tmp24 = el12;
	var doc13 = null;
	if(null == doc13) {
		doc13 = window.document;
	}
	var el13 = doc13.createElement("div");
	var _g32 = 0;
	var _g116 = [{ value : "pane bottom left", name : "class"}];
	while(_g32 < _g116.length) {
		var o13 = _g116[_g32];
		++_g32;
		el13.setAttribute(o13.name,o13.value);
	}
	var attrs13 = null;
	if(null != attrs13) {
		var tmp25 = attrs13.keys();
		while(tmp25.hasNext()) {
			var attr13 = tmp25.next();
			el13.setAttribute(attr13,__map_reserved[attr13] != null?attrs13.getReserved(attr13):attrs13.h[attr13]);
		}
	}
	var children12 = null;
	if(null != children12) {
		var _g33 = 0;
		while(_g33 < children12.length) {
			var child12 = children12[_g33];
			++_g33;
			el13.appendChild(child12);
		}
	}
	var textContent12 = null;
	if(null != textContent12) {
		el13.appendChild(doc13.createTextNode(textContent12));
	}
	var tmp26 = el13;
	var doc14 = null;
	if(null == doc14) {
		doc14 = window.document;
	}
	var el14 = doc14.createElement("div");
	var _g34 = 0;
	var _g117 = [{ value : "pane bottom center", name : "class"}];
	while(_g34 < _g117.length) {
		var o14 = _g117[_g34];
		++_g34;
		el14.setAttribute(o14.name,o14.value);
	}
	var attrs14 = null;
	if(null != attrs14) {
		var tmp27 = attrs14.keys();
		while(tmp27.hasNext()) {
			var attr14 = tmp27.next();
			el14.setAttribute(attr14,__map_reserved[attr14] != null?attrs14.getReserved(attr14):attrs14.h[attr14]);
		}
	}
	var children13 = null;
	if(null != children13) {
		var _g35 = 0;
		while(_g35 < children13.length) {
			var child13 = children13[_g35];
			++_g35;
			el14.appendChild(child13);
		}
	}
	var textContent13 = null;
	if(null != textContent13) {
		el14.appendChild(doc14.createTextNode(textContent13));
	}
	var tmp28 = el14;
	var doc15 = null;
	if(null == doc15) {
		doc15 = window.document;
	}
	var el15 = doc15.createElement("div");
	var _g36 = 0;
	var _g118 = [{ value : "pane bottom right", name : "class"}];
	while(_g36 < _g118.length) {
		var o15 = _g118[_g36];
		++_g36;
		el15.setAttribute(o15.name,o15.value);
	}
	var attrs15 = null;
	if(null != attrs15) {
		var tmp29 = attrs15.keys();
		while(tmp29.hasNext()) {
			var attr15 = tmp29.next();
			el15.setAttribute(attr15,__map_reserved[attr15] != null?attrs15.getReserved(attr15):attrs15.h[attr15]);
		}
	}
	var children14 = null;
	if(null != children14) {
		var _g37 = 0;
		while(_g37 < children14.length) {
			var child14 = children14[_g37];
			++_g37;
			el15.appendChild(child14);
		}
	}
	var textContent14 = null;
	if(null != textContent14) {
		el15.appendChild(doc15.createTextNode(textContent14));
	}
	var children15 = [tmp2,tmp4,tmp6,tmp8,tmp10,tmp12,tmp14,tmp16,tmp18,tmp20,tmp22,tmp24,tmp26,tmp28,el15];
	if(null != children15) {
		var _g38 = 0;
		while(_g38 < children15.length) {
			var child15 = children15[_g38];
			++_g38;
			el.appendChild(child15);
		}
	}
	var textContent15 = null;
	if(null != textContent15) {
		el.appendChild(doc.createTextNode(textContent15));
	}
	this.el = el;
	dots_Dom.append(parent,this.el);
	this.scrollerV = dots_Query.find(".scroller-v",this.el);
	this.scrollerH = dots_Query.find(".scroller-h",this.el);
	this.top = dots_Query.find(".row.top",this.el);
	this.bottom = dots_Query.find(".row.bottom",this.el);
	this.left = dots_Query.find(".column.left",this.el);
	this.right = dots_Query.find(".column.right",this.el);
	var list = dots_Query.selectNodes(".pane.top",this.el);
	this.tops = Array.prototype.slice.call(list,0);
	var list1 = dots_Query.selectNodes(".pane.bottom",this.el);
	this.bottoms = Array.prototype.slice.call(list1,0);
	var list2 = dots_Query.selectNodes(".pane.left",this.el);
	this.lefts = Array.prototype.slice.call(list2,0);
	var list3 = dots_Query.selectNodes(".pane.right",this.el);
	this.rights = Array.prototype.slice.call(list3,0);
	var list4 = dots_Query.selectNodes(".pane.middle",this.el);
	this.middles = Array.prototype.slice.call(list4,0);
	var list5 = dots_Query.selectNodes(".pane.center",this.el);
	this.centers = Array.prototype.slice.call(list5,0);
	this.topLeft = dots_Query.find(".pane.top.left",this.el);
	this.topCenter = dots_Query.find(".pane.top.center",this.el);
	this.topRight = dots_Query.find(".pane.top.right",this.el);
	this.middleLeft = dots_Query.find(".pane.middle.left",this.el);
	this.middleCenter = dots_Query.find(".pane.middle.center",this.el);
	this.middleRight = dots_Query.find(".pane.middle.right",this.el);
	this.bottomLeft = dots_Query.find(".pane.bottom.left",this.el);
	this.bottomCenter = dots_Query.find(".pane.bottom.center",this.el);
	this.bottomRight = dots_Query.find(".pane.bottom.right",this.el);
	this.size = this.getGridSizeFromContainer();
	this.resizeGrid(this.size.w,this.size.h);
	this.resizeContent(options.contentWidth,options.contentHeight);
	var _03 = options;
	var t3;
	if(null == _03) {
		t3 = null;
	} else {
		var _13 = _03.topRail;
		if(null == _13) {
			t3 = null;
		} else {
			t3 = _13;
		}
	}
	var tmp30 = t3 != null?t3:0;
	var _04 = options;
	var t4;
	if(null == _04) {
		t4 = null;
	} else {
		var _14 = _04.bottomRail;
		if(null == _14) {
			t4 = null;
		} else {
			t4 = _14;
		}
	}
	var tmp31 = t4 != null?t4:0;
	var _05 = options;
	var t5;
	if(null == _05) {
		t5 = null;
	} else {
		var _15 = _05.leftRail;
		if(null == _15) {
			t5 = null;
		} else {
			t5 = _15;
		}
	}
	var tmp32 = t5 != null?t5:0;
	var _06 = options;
	var t6;
	if(null == _06) {
		t6 = null;
	} else {
		var _16 = _06.rightRail;
		if(null == _16) {
			t6 = null;
		} else {
			t6 = _16;
		}
	}
	this.sizeRails(tmp30,tmp31,tmp32,t6 != null?t6:0);
	this.refresh();
	window.addEventListener("resize",function(_) {
		var s = _gthis.getGridSizeFromContainer();
		_gthis.resizeGrid(s.w,s.h);
		_gthis.resetPosition();
		_gthis.refresh();
		var osize = _gthis.size;
		_gthis.size = s;
		if(_gthis.size.w != osize.w || _gthis.size.h != osize.h) {
			_gthis.onResize(_gthis.size.w,_gthis.size.h,osize.w,osize.h);
		}
	});
	this.el.addEventListener("wheel",function(e) {
		e.preventDefault();
		_gthis.movePosition(e.deltaX,e.deltaY);
		_gthis.refresh();
	});
	new fancy_core_SwipeMoveHelper(this.el,function(dx,dy) {
		_gthis.movePosition(dx,dy);
		_gthis.refresh();
	});
	new fancy_core_DragMoveHelper(this.scrollerH,function(dx1,_2) {
		_gthis.movePosition(_gthis.scrollerHDimensions.scrollerToContentPosition(dx1)(),0);
		_gthis.refresh();
	});
	new fancy_core_DragMoveHelper(this.scrollerV,function(_3,dy1) {
		_gthis.movePosition(0,_gthis.scrollerVDimensions.scrollerToContentPosition(dy1)());
		_gthis.refresh();
	});
};
fancy_core_Grid9.__name__ = true;
fancy_core_Grid9.prototype = {
	refreshScrollers: function() {
		if(!(this.contentHeight > this.gridHeight)) {
			this.scrollerV.style.display = "none";
		} else {
			this.scrollerV.style.display = "block";
			var pos = this.scrollerVDimensions.contentToScrollerPosition(this.position.y)();
			var size = this.scrollerVDimensions.scrollerSize();
			this.scrollerV.style.top = "" + (this.topRail + pos) + "px";
			this.scrollerV.style.left = "" + (Math.min(this.gridWidth,this.contentWidth) - this.rightRail - this.scrollerSize - this.scrollerMargin) + "px";
			this.scrollerV.style.width = "" + this.scrollerSize + "px";
			this.scrollerV.style.height = "" + size + "px";
		}
		if(!(this.contentWidth > this.gridWidth)) {
			this.scrollerH.style.display = "none";
		} else {
			this.scrollerH.style.display = "block";
			var pos1 = this.scrollerHDimensions.contentToScrollerPosition(this.position.x)();
			var size1 = this.scrollerHDimensions.scrollerSize();
			this.scrollerH.style.left = "" + (this.leftRail + pos1) + "px";
			this.scrollerH.style.top = "" + (Math.min(this.gridHeight,this.contentHeight) - this.bottomRail - this.scrollerSize - this.scrollerMargin) + "px";
			this.scrollerH.style.width = "" + size1 + "px";
			this.scrollerH.style.height = "" + this.scrollerSize + "px";
		}
	}
	,resetPosition: function() {
		this.setPosition(this.position.x,this.position.y);
	}
	,movePosition: function(x,y) {
		this.setPosition(this.position.x + x,this.position.y + y);
	}
	,setPosition: function(x,y) {
		var oldx = this.position.x;
		var oldy = this.position.y;
		this.position.x = x;
		this.position.y = y;
		var limit = Math.max(this.contentWidth - this.gridWidth,0);
		if(this.position.x < 0) {
			this.position.x = 0;
		} else if(this.position.x > limit) {
			this.position.x = limit;
		}
		var limit1 = Math.max(this.contentHeight - this.gridHeight,0);
		if(this.position.y < 0) {
			this.position.y = 0;
		} else if(this.position.y > limit1) {
			this.position.y = limit1;
		}
		if(oldx == this.position.x && oldy == this.position.y) {
			return;
		}
		this.onScroll(this.position.x,this.position.y,oldx,oldy);
		this.dirty = true;
	}
	,getGridSizeFromContainer: function() {
		return { w : this.el.parentElement.offsetWidth, h : this.el.parentElement.offsetHeight};
	}
	,refresh: function() {
		var _gthis = this;
		if(!this.dirty) {
			return;
		}
		this.dirty = false;
		var _e = this.middles;
		(function(effect) {
			thx_Arrays.each(_e,effect);
		})(function(_) {
			return _.style.top = "" + (-_gthis.position.y + _gthis.topRail) + "px";
		});
		var _e1 = this.bottoms;
		(function(effect1) {
			thx_Arrays.each(_e1,effect1);
		})(function(_1) {
			return _1.style.top = "" + (Math.min(_gthis.gridHeight,_gthis.contentHeight) - _gthis.bottomRail) + "px";
		});
		this.bottom.style.top = "" + (Math.min(this.gridHeight,this.contentHeight) - this.bottomRail) + "px";
		var _e2 = this.centers;
		(function(effect2) {
			thx_Arrays.each(_e2,effect2);
		})(function(_2) {
			return _2.style.left = "" + (-_gthis.position.x + _gthis.leftRail) + "px";
		});
		var _e3 = this.rights;
		(function(effect3) {
			thx_Arrays.each(_e3,effect3);
		})(function(_3) {
			return _3.style.left = "" + (Math.min(_gthis.gridWidth,_gthis.contentWidth) - _gthis.rightRail) + "px";
		});
		this.right.style.left = "" + (Math.min(this.gridWidth,this.contentWidth) - this.rightRail) + "px";
		dots_Dom.toggleClass(this.top,"overlay-bottom",this.position.y > 0 || this.gridHeight < this.topRail + this.bottomRail);
		dots_Dom.toggleClass(this.bottom,"overlay-top",this.contentHeight > this.gridHeight && this.position.y < this.contentHeight - this.gridHeight);
		dots_Dom.toggleClass(this.left,"overlay-right",this.position.x > 0 || this.gridWidth < this.leftRail + this.rightRail);
		dots_Dom.toggleClass(this.right,"overlay-left",this.contentWidth > this.gridWidth && this.position.x < this.contentWidth - this.gridWidth);
		this.refreshScrollers();
	}
	,resizeGrid: function(width,height) {
		if(this.gridWidth == width && this.gridHeight == height) {
			return;
		}
		this.dirty = true;
		this.gridWidth = width;
		this.gridHeight = height;
		this.top.style.width = this.bottom.style.width = "" + Math.min(this.gridWidth,this.contentWidth) + "px";
		this.left.style.height = this.right.style.height = "" + Math.min(this.gridHeight,this.contentHeight) + "px";
	}
	,resizeContent: function(width,height) {
		if(this.contentWidth == width && this.contentHeight == height) {
			return;
		}
		this.dirty = true;
		this.contentWidth = width;
		this.contentHeight = height;
		this.top.style.width = this.bottom.style.width = "" + Math.min(this.gridWidth,this.contentWidth) + "px";
		this.left.style.height = this.right.style.height = "" + Math.min(this.gridHeight,this.contentHeight) + "px";
	}
	,sizeRails: function(topRail,bottomRail,leftRail,rightRail) {
		var _gthis = this;
		this.dirty = true;
		this.topRail = topRail;
		this.bottomRail = bottomRail;
		this.leftRail = leftRail;
		this.rightRail = rightRail;
		this.top.style.height = "" + topRail + "px";
		var _e = this.tops;
		(function(effect) {
			thx_Arrays.each(_e,effect);
		})(function(_) {
			return _.style.height = "" + topRail + "px";
		});
		var _e1 = this.middles;
		(function(effect1) {
			thx_Arrays.each(_e1,effect1);
		})(function(_1) {
			return _1.style.height = "" + (_gthis.contentHeight - topRail - bottomRail) + "px";
		});
		this.bottom.style.height = "" + bottomRail + "px";
		var _e2 = this.bottoms;
		(function(effect2) {
			thx_Arrays.each(_e2,effect2);
		})(function(_2) {
			return _2.style.height = "" + bottomRail + "px";
		});
		this.left.style.width = "" + leftRail + "px";
		var _e3 = this.lefts;
		(function(effect3) {
			thx_Arrays.each(_e3,effect3);
		})(function(_3) {
			return _3.style.width = "" + leftRail + "px";
		});
		var _e4 = this.centers;
		(function(effect4) {
			thx_Arrays.each(_e4,effect4);
		})(function(_4) {
			return _4.style.width = "" + (_gthis.contentWidth - leftRail - rightRail) + "px";
		});
		this.right.style.width = "" + rightRail + "px";
		var _e5 = this.rights;
		(function(effect5) {
			thx_Arrays.each(_e5,effect5);
		})(function(_5) {
			return _5.style.width = "" + rightRail + "px";
		});
	}
	,get_gridMiddleHeight: function() {
		return this.gridHeight - this.topRail - this.bottomRail;
	}
	,get_gridCenterWidth: function() {
		return this.gridWidth - this.leftRail - this.rightRail;
	}
};
var fancy_core_IntCache = function() {
	this.cache = [];
};
fancy_core_IntCache.__name__ = true;
fancy_core_IntCache.prototype = {
	invalidate: function() {
		this.cache = [];
	}
};
var fancy_core__$Lazy_Lazy_$Impl_$ = {};
fancy_core__$Lazy_Lazy_$Impl_$.__name__ = true;
fancy_core__$Lazy_Lazy_$Impl_$.map = function(this1,f) {
	return function() {
		return f(this1());
	};
};
fancy_core__$Lazy_Lazy_$Impl_$.subtract = function(l1,l2) {
	return function() {
		return l1() - l2();
	};
};
fancy_core__$Lazy_Lazy_$Impl_$.multiply = function(l1,l2) {
	return function() {
		return l1() * l2();
	};
};
fancy_core__$Lazy_Lazy_$Impl_$.divideFromFloat = function(v1,l2) {
	return function() {
		return v1 / l2();
	};
};
var fancy_core_LazyFloatExtensions = function() { };
fancy_core_LazyFloatExtensions.__name__ = true;
fancy_core_LazyFloatExtensions.min = function(l1,l2) {
	return function() {
		return Math.min(l1(),l2());
	};
};
fancy_core_LazyFloatExtensions.max = function(l1,l2) {
	return function() {
		return Math.max(l1(),l2());
	};
};
var fancy_core_PositionCache = function() {
	this.cache = [];
};
fancy_core_PositionCache.__name__ = true;
fancy_core_PositionCache.prototype = {
	get: function(row,col) {
		var r = this.cache[row];
		if(null == r) {
			return null;
		}
		return r[col];
	}
	,set: function(row,col,value) {
		var r = this.cache[row];
		if(null == r) {
			r = this.cache[row] = [];
		}
		r[col] = value;
	}
	,invalidate: function() {
		this.cache = [];
	}
};
var fancy_core_ScrollerDimensions = function(opt) {
	var _gthis = this;
	this.viewSize = opt.viewSize;
	this.contentSize = opt.contentSize;
	this.scrollerArea = opt.scrollerArea;
	var minScrollerSize = null == opt.minScrollerSize?function() {
		return 0.0;
	}:fancy_core_LazyFloatExtensions.max(opt.minScrollerSize,function() {
		return 0.0;
	});
	var maxScrollerSize;
	if(null == opt.maxScrollerSize) {
		var v = Infinity;
		maxScrollerSize = function() {
			return v;
		};
	} else {
		maxScrollerSize = fancy_core__$Lazy_Lazy_$Impl_$.map(opt.maxScrollerSize,function(v1) {
			if(v1 < 0.0) {
				return Infinity;
			} else {
				return v1;
			}
		});
	}
	this.proportionalScrollerSize = function() {
		return _gthis.viewSize() / _gthis.contentSize() * _gthis.scrollerArea();
	};
	this.scrollerSize = fancy_core_LazyFloatExtensions.min(fancy_core_LazyFloatExtensions.max(this.proportionalScrollerSize,minScrollerSize),maxScrollerSize);
};
fancy_core_ScrollerDimensions.__name__ = true;
fancy_core_ScrollerDimensions.prototype = {
	scrollerPositionAsPercent: function(position) {
		return fancy_core__$Lazy_Lazy_$Impl_$.divideFromFloat(position,fancy_core__$Lazy_Lazy_$Impl_$.subtract(this.scrollerArea,this.scrollerSize));
	}
	,contentPositionAsPercent: function(position) {
		return fancy_core__$Lazy_Lazy_$Impl_$.divideFromFloat(position,fancy_core__$Lazy_Lazy_$Impl_$.subtract(this.contentSize,this.viewSize));
	}
	,scrollerToContentPosition: function(position) {
		return fancy_core__$Lazy_Lazy_$Impl_$.multiply(this.scrollerPositionAsPercent(position),fancy_core__$Lazy_Lazy_$Impl_$.subtract(this.contentSize,this.viewSize));
	}
	,contentToScrollerPosition: function(position) {
		return fancy_core__$Lazy_Lazy_$Impl_$.multiply(this.contentPositionAsPercent(position),fancy_core__$Lazy_Lazy_$Impl_$.subtract(this.scrollerArea,this.scrollerSize));
	}
};
var fancy_core_Search = function() { };
fancy_core_Search.__name__ = true;
fancy_core_Search.binary = function(min,max,comparator) {
	if(min > max) {
		var temp = max;
		max = min;
		min = temp;
	}
	var mid = function(l,r) {
		return (l + r) / 2 | 0;
	};
	var search = null;
	search = function(m,l1,r1) {
		var c = comparator(m);
		if(c < 0) {
			l1 = m + 1;
			return search(mid(l1,r1),l1,r1);
		} else if(c > 0) {
			r1 = m - 1;
			return search(mid(l1,r1),l1,r1);
		} else {
			return m;
		}
	};
	return search(mid(min,max),min,max);
};
var fancy_core_SwipeMoveHelper = function(el,callback) {
	var _gthis = this;
	this.el = el;
	el.addEventListener("touchmove",function(e) {
		e.preventDefault();
		_gthis.apply(e,function(t) {
			var dx = t.clientX - _gthis.x;
			var dy = t.clientY - _gthis.y;
			_gthis.x = t.clientX;
			_gthis.y = t.clientY;
			callback(-dx,-dy);
		});
	});
	el.addEventListener("touchstart",function(e1) {
		e1.preventDefault();
		if(null != _gthis.id) {
			return;
		}
		var t1 = e1.touches[0];
		_gthis.id = t1.identifier;
		_gthis.x = t1.clientX;
		_gthis.y = t1.clientY;
	});
	el.addEventListener("touchend",function(e2) {
		e2.preventDefault();
		if(e2.touches.length == 0) {
			_gthis.id = null;
		} else {
			_gthis.apply(e2,function(_) {
				_gthis.id = null;
			});
		}
	});
};
fancy_core_SwipeMoveHelper.__name__ = true;
fancy_core_SwipeMoveHelper.prototype = {
	apply: function(e,f) {
		var _g = 0;
		var _g1 = e.touches;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.identifier == this.id) {
				f(t);
				break;
			}
		}
	}
};
var fancy_table_FancyTableSettings = function(fixedTop,fixedLeft,fallbackCell,classes,hSize) {
	this.fixedTop = fixedTop;
	this.fixedLeft = fixedLeft;
	this.fallbackCell = fallbackCell;
	this.classes = classes;
	this.hSize = hSize;
};
fancy_table_FancyTableSettings.__name__ = true;
fancy_table_FancyTableSettings.classesFromOptions = function(opts) {
	if(opts == null) {
		opts = { };
	}
	return { cellContent : opts.cellContent != null?opts.cellContent:"ft-cell-content", rowExpanded : opts.rowExpanded != null?opts.rowExpanded:"ft-row-expanded", rowCollapsed : opts.rowCollapsed != null?opts.rowCollapsed:"ft-row-collapsed", rowFoldHeader : opts.rowFoldHeader != null?opts.rowFoldHeader:"ft-row-fold-header", rowIndent : opts.rowIndent != null?opts.rowIndent:"ft-row-indent-"};
};
fancy_table_FancyTableSettings.fromOptions = function(opts) {
	if(opts == null) {
		opts = { };
	}
	return new fancy_table_FancyTableSettings(opts.fixedTop != null?opts.fixedTop:0,opts.fixedLeft != null?opts.fixedLeft:0,opts.fallbackCell != null?opts.fallbackCell:fancy_table_util__$CellContent_CellContent_$Impl_$.fromString(""),fancy_table_FancyTableSettings.classesFromOptions(opts.classes),opts.hSize != null?opts.hSize:function(_,_1) {
		return fancy_CellDimension.RenderSmart;
	});
};
var fancy_table_Row = function(cells,classSettings,height,customClasses,expanded,indentation) {
	if(indentation == null) {
		indentation = 0;
	}
	if(expanded == null) {
		expanded = true;
	}
	this.rows = [];
	this.cells = cells;
	this.classSettings = classSettings;
	this.height = height;
	this.customClasses = customClasses != null?customClasses:[];
	this.expanded = expanded;
	this.indentation = indentation;
};
fancy_table_Row.__name__ = true;
fancy_table_Row.prototype = {
	getClasses: function() {
		var classes = [this.classSettings.rowIndent + Std.string(this.indentation)].concat(this.customClasses);
		if(this.rows.length > 0) {
			classes.push(this.classSettings.rowFoldHeader);
			classes.push(this.expanded?this.classSettings.rowExpanded:this.classSettings.rowCollapsed);
		}
		return classes;
	}
	,renderCell: function(table,row,col) {
		var _gthis = this;
		return thx_Options.map(thx_Arrays.getOption(this.cells,col),function(cell) {
			var doc = null;
			if(null == doc) {
				doc = window.document;
			}
			var el = doc.createElement("div");
			var _g1 = 0;
			var _g2 = [];
			while(_g1 < _g2.length) {
				var o = _g2[_g1];
				++_g1;
				el.setAttribute(o.name,o.value);
			}
			var _g11 = new haxe_ds_StringMap();
			var value = _gthis.getClasses().join(" ");
			if(__map_reserved["class"] != null) {
				_g11.setReserved("class",value);
			} else {
				_g11.h["class"] = value;
			}
			var attrs = _g11;
			if(null != attrs) {
				var tmp = attrs.keys();
				while(tmp.hasNext()) {
					var attr = tmp.next();
					el.setAttribute(attr,__map_reserved[attr] != null?attrs.getReserved(attr):attrs.h[attr]);
				}
			}
			var children = [fancy_table_util__$CellContent_CellContent_$Impl_$.render(cell,_gthis.classSettings.cellContent,table,row,col)];
			if(null != children) {
				var _g21 = 0;
				while(_g21 < children.length) {
					var child = children[_g21];
					++_g21;
					el.appendChild(child);
				}
			}
			var textContent = null;
			if(null != textContent) {
				el.appendChild(doc.createTextNode(textContent));
			}
			return el;
		});
	}
	,toggle: function() {
		this.expanded = !this.expanded;
	}
};
var fancy_table_util_CellContentImpl = { __ename__ : true, __constructs__ : ["RawValue","LazyElement"] };
fancy_table_util_CellContentImpl.RawValue = function(v) { var $x = ["RawValue",0,v]; $x.__enum__ = fancy_table_util_CellContentImpl; $x.toString = $estr; return $x; };
fancy_table_util_CellContentImpl.LazyElement = function(fn) { var $x = ["LazyElement",1,fn]; $x.__enum__ = fancy_table_util_CellContentImpl; $x.toString = $estr; return $x; };
var fancy_table_util__$CellContent_CellContent_$Impl_$ = {};
fancy_table_util__$CellContent_CellContent_$Impl_$.__name__ = true;
fancy_table_util__$CellContent_CellContent_$Impl_$.fromString = function(s) {
	return fancy_table_util_CellContentImpl.RawValue(s);
};
fancy_table_util__$CellContent_CellContent_$Impl_$.render = function(this1,className,t,row,col) {
	switch(this1[1]) {
	case 0:
		var v = this1[2];
		var doc = null;
		if(null == doc) {
			doc = window.document;
		}
		var el = doc.createElement("div");
		var _g1 = 0;
		var _g2 = [];
		while(_g1 < _g2.length) {
			var o = _g2[_g1];
			++_g1;
			el.setAttribute(o.name,o.value);
		}
		var _g11 = new haxe_ds_StringMap();
		if(__map_reserved["class"] != null) {
			_g11.setReserved("class",className);
		} else {
			_g11.h["class"] = className;
		}
		var attrs = _g11;
		if(null != attrs) {
			var tmp = attrs.keys();
			while(tmp.hasNext()) {
				var attr = tmp.next();
				el.setAttribute(attr,__map_reserved[attr] != null?attrs.getReserved(attr):attrs.h[attr]);
			}
		}
		var children = null;
		if(null != children) {
			var _g21 = 0;
			while(_g21 < children.length) {
				var child = children[_g21];
				++_g21;
				el.appendChild(child);
			}
		}
		var textContent = v;
		if(null != textContent) {
			el.appendChild(doc.createTextNode(textContent));
		}
		return el;
	case 1:
		return this1[2](t,row,col);
	}
};
var fancy_table_util_NestedData = function() { };
fancy_table_util_NestedData.__name__ = true;
fancy_table_util_NestedData.toRows = function(data,classes,indentation) {
	if(indentation == null) {
		indentation = 0;
	}
	return thx_Arrays.reduce(data,function(acc,curr) {
		if(curr.meta == null) {
			curr.meta = { };
		}
		if(curr.data == null) {
			curr.data = [];
		}
		if(curr.meta.height == null) {
			curr.meta.height = fancy_CellDimension.RenderSmart;
		}
		var newRow = new fancy_table_Row(curr.values,classes,curr.meta.height,curr.meta.classes,curr.meta.expanded,indentation);
		if(curr.data.length > 0) {
			newRow.rows = newRow.rows.concat(fancy_table_util_NestedData.toRows(curr.data,classes,indentation + 1));
		}
		return thx_Arrays.append(acc,newRow);
	},[]);
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var thx_Arrays = function() { };
thx_Arrays.__name__ = true;
thx_Arrays.append = function(array,element) {
	array.push(element);
	return array;
};
thx_Arrays.getOption = function(array,i) {
	var value = array[i];
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Arrays.each = function(arr,effect) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) effect(arr[_g1++]);
};
thx_Arrays.groupByAppend = function(arr,resolver,map) {
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var v = arr[_g1++];
		var key = resolver(v);
		var acc = map.get(key);
		if(null == acc) {
			map.set(key,[v]);
		} else {
			acc.push(v);
		}
	}
	return map;
};
thx_Arrays.reduce = function(array,f,initial) {
	var tmp = HxOverrides.iter(array);
	while(tmp.hasNext()) initial = f(initial,tmp.next());
	return initial;
};
var thx_Either = { __ename__ : true, __constructs__ : ["Left","Right"] };
thx_Either.Left = function(value) { var $x = ["Left",0,value]; $x.__enum__ = thx_Either; $x.toString = $estr; return $x; };
thx_Either.Right = function(value) { var $x = ["Right",1,value]; $x.__enum__ = thx_Either; $x.toString = $estr; return $x; };
var thx_Iterators = function() { };
thx_Iterators.__name__ = true;
thx_Iterators.map = function(it,f) {
	var acc = [];
	while(it.hasNext()) acc.push(f(it.next()));
	return acc;
};
var thx_Maps = function() { };
thx_Maps.__name__ = true;
thx_Maps.tuples = function(map) {
	return thx_Iterators.map(map.keys(),function(key) {
		return { _0 : key, _1 : map.get(key)};
	});
};
var thx_Options = function() { };
thx_Options.__name__ = true;
thx_Options.map = function(option,callback) {
	switch(option[1]) {
	case 0:
		return haxe_ds_Option.Some(callback(option[2]));
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.flatMap = function(option,callback) {
	switch(option[1]) {
	case 0:
		return callback(option[2]);
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.cata = function(option,ifNone,f) {
	switch(option[1]) {
	case 0:
		return f(option[2]);
	case 1:
		return ifNone;
	}
};
thx_Options.getOrElse = function(option,alt) {
	switch(option[1]) {
	case 0:
		return option[2];
	case 1:
		return alt;
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {}
dots_Query.doc = document;
Main.main();
})();
